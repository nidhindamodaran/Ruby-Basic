#!/usr/bin/env ruby
require 'rubygems'
require 'active_record'
require 'mysql2'

ActiveRecord::Base.establish_connection(
  adapter:  'mysql2',
  host:     'localhost',
  database: 'students',
  username: 'root',
  password: 'root'
)

class Student < ActiveRecord::Base
  attr_accessor :attr_list
  validates :name, :dept , presence:true
  validates :age, presence:true, numericality: { only_integer: true, message: "Enter correct Age "}, length: { maximum: 2, message: "Entered Age is Incorrect"}
  validates :mob, presence:true, uniqueness:true, numericality: { only_integer: true, message: "Enter correct Mobile Number "}, length: { is: 10, message: "Please check Mobile Number" }
  validates :email, presence:true, uniqueness:true, format: { with: /\A[\w+\-.]+@[a-z\d\-]+(\.[a-z]+)*\.[a-z]+\z/i, message: "Enter correct Email"}
  def attr_list
    [:id, :name, :age, :mob, :dept]
  end
  def read
    print "Enter the name :"
    self.name = gets.chomp
    print "\nEnter the age :"
    self.age = gets.chomp
    print "\nEnter the mob :"
    self.mob = gets.chomp
    print "\nEnter the dept :"
    self.dept = gets.chomp
    print "\nEnter the Email :"
    self.email = gets.chomp
  end
end

if ARGV.size == 0
    ActiveRecord::Schema.define do
      create_table(:students,force:true, primary_key:'id')do |t|
         t.column :name, :string, limit:80
         t.column :age, :integer
         t.column :mob, :string, limit:20
         t.column :dept, :string, limit:80
         t.column :email, :string, limit:80

      end
    end
    begin
      s = Student.new
      puts "Enter the details of the student :"
      s.read
      if s.save
        puts "\nSaved Successfully"
      else
        puts "\nNot Saved!!!!\nYou have following Errors ! "
        puts "---------------------------"
        s.errors.full_messages.each.with_index do |i,index|
          puts "#{index} : #{i}\n"

        end
      end
      print "\n Do you want to enter next recordd ? (y/n)"
      opt = gets.chomp
  end while  opt.eql?("y")
elsif (ARGV.join(",") =~ (/search\b$/)||(ARGV.join(",") =~ (/search=[0-9a-zA-Z]+$/)))
  if ARGV.join(",") =~ /search$/
    print "Enter the name of student to get details : "
    names = $stdin.gets.chomp
  else
     names = ARGV.join(",").scan(/search=(.*)/).join(",")
  end

  result = Student.where("name LIKE:prefix",prefix: "#{names}%")
  if result.present?
    puts "Found"
    print "\n NAME      |     AGE    |     MOB     |     DEPT      |    EMAIL"
    print "\n------------------------------------------------------------------------"
    result.each do |i|
      print "\n#{i.name}         #{i.age}         #{i.mob}          #{i.dept}      #{i.email}"
      print "\n------------------------------------------------------------------------\n"
    end

  else
    print "Not Found\n"
  end
elsif (ARGV.join(",") =~ (/help\b$/))
  puts "-----------How to use--------------"
  puts "Student erp works bases on database saving and searching mechanism\nBy Running 'student_reg' without options it is redirected to enter the records\nBy running 'student_reg' with options '--search' or '--search=\"search_text\"' it is possible to made search\n Thank you"
end
